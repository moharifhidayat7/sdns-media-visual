// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  MENUNGGU
  DITERIMA
  SELESAI
  ACTIVE
  INACTIVE
  DEBIT
  KREDIT
}

enum TypeGajiKaryawan {
  ABSENSI
  PENDAPATAN
  POTONGAN
}

// This is enum type definition.

model Akses {
  nama   String
  path   String
  read   Boolean?
  write  Boolean?
  roleId Int
  role   Role     @relation("roleAkses", references: [id], fields: [roleId], onDelete: Cascade)

  @@unique([roleId, path], name: "uniqueRole")
}

model Role {
  id        Int       @id @default(autoincrement())
  nama      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean?  @default(false)
  updatedId Int?
  createdId Int?
  updatedBy User?     @relation("roleupdatedBy", references: [id], fields: [updatedId])
  createdBy User?     @relation("rolecreatedBy", references: [id], fields: [createdId])
  user      User[]    @relation("userRole")
  akses     Akses[]   @relation("roleAkses")
}

model User {
  id                     Int               @id @default(autoincrement())
  nama                   String?
  email                  String            @unique
  password               String
  resetPasswordToken     String?
  roleId                 Int
  role                   Role              @relation("userRole", references: [id], fields: [roleId])
  telepon                String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deletedAt              DateTime?
  isDeleted              Boolean?          @default(false)
  updatedId              Int?
  createdId              Int?
  updatedBy              User?             @relation("updatedBy", references: [id], fields: [updatedId])
  createdBy              User?             @relation("createdBy", references: [id], fields: [createdId])
  createdProduk          Produk[]          @relation("produkcreatedBy")
  updatedProduk          Produk[]          @relation("produkupdatedBy")
  createdInventori       Inventori[]       @relation("userInventoriCreate")
  updatedInventori       Inventori[]       @relation("userInventoriUpdate")
  createdLogstok         Logstok[]         @relation("logstokcreatedBy")
  updatedLogstok         Logstok[]         @relation("logstokupdatedBy")
  createdSupplier        Supplier[]        @relation("suppliercreatedBy")
  updatedSupplier        Supplier[]        @relation("supplierupdatedBy")
  createdGudang          Gudang[]          @relation("gudangcreatedBy")
  updatedGudang          Gudang[]          @relation("gudangupdatedBy")
  createdFitur           Fitur[]           @relation("fiturcreatedBy")
  updatedFitur           Fitur[]           @relation("fiturupdatedBy")
  createdPaket           Paket[]           @relation("paketcreatedBy")
  updatedPaket           Paket[]           @relation("paketupdatedBy")
  updatedUser            User[]            @relation("updatedBy")
  createdUser            User[]            @relation("createdBy")
  createdMkas            Mkas[]            @relation("mkascreatedBy")
  updatedMkas            Mkas[]            @relation("mkasupdatedBy")
  createdFakturStokMasuk FakturStokMasuk[] @relation("fakturstokmasukcreatedBy")
  updatedFakturStokMasuk FakturStokMasuk[] @relation("fakturstokmasukupdatedBy")
  updatedRole            Role[]            @relation("roleupdatedBy")
  createdRole            Role[]            @relation("rolecreatedBy")
  createdVoucher         Voucher[]         @relation("vouchercreatedBy")
  updatedVoucher         Voucher[]         @relation("voucherupdatedBy")
  createdGajiKaryawan    GajiKaryawan[]    @relation("GajiKaryawancreatedBy")
  updatedGajiKaryawan    GajiKaryawan[]    @relation("GajiKaryawanupdatedBy")
  gajiKaryawan           GajiKaryawan[]    @relation("GajiKaryawan")
}

// model Kas{
//     status       Status             @default(MENUNGGU)
//   createdAt    DateTime           @default(now())
//   updatedAt    DateTime           @updatedAt
//   deletedAt    DateTime?
//   isDeleted    Boolean?           @default(false)
//   updatedBy    User?              @relation(fields: [updatedId], references: [id], name: "GajiKaryawanupdatedBy")
//   createdBy    User?              @relation(fields: [createdId], references: [id], name: "GajiKaryawancreatedBy")
//   updatedId    Int?
//   createdId    Int?
// }
model GajiKaryawan {
  id           Int                @id @default(autoincrement())
  tanggalinput DateTime           @default(now())
  notransaksi  String
  periode      String
  catatan      String?
  status       Status             @default(MENUNGGU)
  karyawan     User?              @relation(fields: [karyawanId], references: [id], name: "GajiKaryawan")
  karyawanId   Int?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
  isDeleted    Boolean?           @default(false)
  updatedBy    User?              @relation(fields: [updatedId], references: [id], name: "GajiKaryawanupdatedBy")
  createdBy    User?              @relation(fields: [createdId], references: [id], name: "GajiKaryawancreatedBy")
  updatedId    Int?
  createdId    Int?
  items        GajiKaryawanItem[] @relation("GajiKaryawanItem")
}

model GajiKaryawanItem {
  id             Int              @id @default(autoincrement())
  gajiKaryawan   GajiKaryawan?    @relation(fields: [gajiKaryawanId], references: [id], name: "GajiKaryawanItem")
  gaji           String
  tipe           TypeGajiKaryawan
  nama           String
  gajiKaryawanId Int?
  status         Status           @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  isDeleted      Boolean?         @default(false)
  updatedId      Int?
  createdId      Int?
}

model FakturStokMasuk {
  id             Int                   @id @default(autoincrement())
  faktur         String?
  keterangan     String?               @db.Text
  nomortransaksi String
  tanggalinput   DateTime              @default(now())
  status         Status                @default(ACTIVE)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  deletedAt      DateTime?
  isDeleted      Boolean?              @default(false)
  updatedBy      User?                 @relation(fields: [updatedId], references: [id], name: "fakturstokmasukupdatedBy")
  createdBy      User?                 @relation(fields: [createdId], references: [id], name: "fakturstokmasukcreatedBy")
  updatedId      Int?
  createdId      Int?
  items          FakturStokMasukItem[] @relation("fakturstokmasukitems")
  supplier       Supplier?             @relation(fields: [supplierId], references: [id], name: "supplierstokmasuk")
  supplierId     Int?
}

model FakturStokMasukItem {
  id                Int              @id @default(autoincrement())
  stok              String?
  harga             String?
  FakturStokMasuk   FakturStokMasuk? @relation(fields: [fakturStokMasukId], references: [id], name: "fakturstokmasukitems")
  Inventori         Inventori?       @relation(fields: [inventoriId], references: [id], name: "fakturinventori")
  inventoriId       Int?
  Gudang            Gudang?          @relation(fields: [gudangId], references: [id], name: "faturstokmasukgudang")
  gudangId          Int?
  fakturStokMasukId Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  isDeleted         Boolean?         @default(false)
  updatedId         Int?
  createdId         Int?
}

model Mkas {
  id        Int             @id @default(autoincrement())
  nama      String          
  kode      String
  prefix    String          @unique
  status    Status?         @default(INACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?
  isDeleted Boolean?        @default(false)
  updatedBy User?           @relation(fields: [updatedId], references: [id], name: "mkasupdatedBy")
  createdBy User?           @relation(fields: [createdId], references: [id], name: "mkascreatedBy")
  updatedId Int?
  createdId Int?
  perkiraan MkasPerkiraan[] @relation("mkasperkiraan")
}

model MkasPerkiraan {
  id        Int       @id @default(autoincrement())
  nama      String
  mkas      Mkas?     @relation(fields: [mkasId], references: [id], name: "mkasperkiraan")
  mkasId    Int?
  status    Status    @default(DEBIT)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  isDeleted Boolean?  @default(false)
  updatedId Int?
  createdId Int?
}

model Fitur {
  id        Int              @id @default(autoincrement())
  kode      String           @unique
  nama      String           @unique
  status    Status           @default(INACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  isDeleted Boolean?         @default(false)
  updatedBy User?            @relation(fields: [updatedId], references: [id], name: "fiturupdatedBy")
  createdBy User?            @relation(fields: [createdId], references: [id], name: "fiturcreatedBy")
  updatedId Int?
  createdId Int?
  pakets    FitursOnPakets[]
}

model Paket {
  id        Int              @id @default(autoincrement())
  kode      String
  nama      String
  harga     Int
  produk    Produk?          @relation(fields: [produkId], references: [id], name: "paketproduk")
  produkId  Int?
  status    Status           @default(INACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  isDeleted Boolean?         @default(false)
  updatedBy User?            @relation(fields: [updatedId], references: [id], name: "paketupdatedBy")
  createdBy User?            @relation(fields: [createdId], references: [id], name: "paketcreatedBy")
  updatedId Int?
  createdId Int?
  fiturs    FitursOnPakets[]
}

model FitursOnPakets {
  fitur   Fitur @relation(fields: [fiturId], references: [id])
  paket   Paket @relation(fields: [paketId], references: [id])
  fiturId Int
  paketId Int

  @@id([fiturId, paketId])
}

model Produk {
  id        Int       @id @default(autoincrement())
  kode      String
  nama      String
  status    Status    @default(INACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean?  @default(false)
  updatedBy User?     @relation(fields: [updatedId], references: [id], name: "produkupdatedBy")
  createdBy User?     @relation(fields: [createdId], references: [id], name: "produkcreatedBy")
  updatedId Int?
  createdId Int?
  paket     Paket[]   @relation("paketproduk")
}

model Gudang {
  id                   Int                   @id @default(autoincrement())
  kode                 String
  nama                 String
  status               Status                @default(INACTIVE)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  isDeleted            Boolean?              @default(false)
  updatedBy            User?                 @relation(fields: [updatedId], references: [id], name: "gudangupdatedBy")
  createdBy            User?                 @relation(fields: [createdId], references: [id], name: "gudangcreatedBy")
  updatedId            Int?
  createdId            Int?
  Logstok              Logstok[]             @relation("gudang")
  fakturstokmasukitems FakturStokMasukItem[] @relation("faturstokmasukgudang")
}

model Supplier {
  id               Int               @id @default(autoincrement())
  kode             String
  nama             String
  alamat           String            @db.Text
  whatsapp         String?
  no_telphone      String
  email            String?
  status           Status            @default(INACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  isDeleted        Boolean?          @default(false)
  updatedBy        User?             @relation(fields: [updatedId], references: [id], name: "supplierupdatedBy")
  createdBy        User?             @relation(fields: [createdId], references: [id], name: "suppliercreatedBy")
  updatedId        Int?
  createdId        Int?
  fakturStokMasuks FakturStokMasuk[] @relation("supplierstokmasuk")
}

model Inventori {
  id         Int                   @id @default(autoincrement())
  kode       String
  tipe       String
  merek      String
  nama       String
  harga_beli Int
  stok       Int?                  @default(0)
  satuan     String
  logstok    Logstok[]             @relation("inventori")
  status     Status                @default(INACTIVE)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime?             @updatedAt
  deletedAt  DateTime?
  isDeleted  Boolean?              @default(false)
  updatedBy  User?                 @relation(fields: [updatedId], references: [id], name: "userInventoriCreate")
  createdBy  User?                 @relation(fields: [createdId], references: [id], name: "userInventoriUpdate")
  updatedId  Int?
  createdId  Int?
  faktur     FakturStokMasukItem[] @relation("fakturinventori")
}

model Logstok {
  id          Int        @id @default(autoincrement())
  stok        Int
  datelog     String
  inventori   Inventori? @relation("inventori", fields: [inventoriId], references: [id])
  gudang      Gudang?    @relation("gudang", fields: [gudangId], references: [id])
  gudangId    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean?   @default(false)
  updatedBy   User?      @relation(fields: [updatedId], references: [id], name: "logstokupdatedBy")
  createdBy   User?      @relation(fields: [createdId], references: [id], name: "logstokcreatedBy")
  updatedId   Int?
  createdId   Int?
  inventoriId Int?
}

model Voucher {
  id           Int       @id @default(autoincrement())
  kode         String    @unique
  expiredAt    DateTime?
  perpanjangan Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  isDeleted    Boolean?  @default(false)
  updatedBy    User?     @relation(fields: [updatedId], references: [id], name: "voucherupdatedBy")
  createdBy    User?     @relation(fields: [createdId], references: [id], name: "vouchercreatedBy")
  updatedId    Int?
  createdId    Int?
}

enum TipeAkun {
  DEBET
  KREDIT
}

model Akun {
  id        Int       @id @default(autoincrement())
  kode      String    @unique
  nama      String
  tipe      TipeAkun
  parentId  Int?
  parent    Akun?     @relation(name: "SubAkun", references: [id], fields: [parentId])
  child     Akun[]    @relation(name: "SubAkun")
  isDeleted Boolean?  @default(false)
  deletedAt DateTime?
}
