// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int         @id @default(autoincrement())
  email              String      @unique
  username           String      @unique
  password           String
  resetPasswordToken String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  deletedAt          DateTime?
  isDeleted          Boolean?    @default(false)
  updatedBy          Int?
  createdBy          Int?
  createdProduk      Produk[]    @relation("produkcreatedBy")
  updatedProduk      Produk[]    @relation("produkupdatedBy")
  createdInventori   Inventori[] @relation("userInventoriCreate")
  updatedInventori   Inventori[] @relation("userInventoriUpdate")
  createdLogstok     Logstok[]   @relation("logstokcreatedBy")
  updatedLogstok     Logstok[]   @relation("logstokupdatedBy")
}

model Produk {
  id        Int       @id @default(autoincrement())
  kode      String
  nama      String
  status    Status    @default(INACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean?  @default(false)
  updatedBy User?     @relation(fields: [updatedId], references: [id], name: "produkupdatedBy")
  createdBy User?     @relation(fields: [createdId], references: [id], name: "produkcreatedBy")
  updatedId Int?
  createdId Int?
}

model Inventori {
  id         Int       @id @default(autoincrement())
  kode       String
  tipe       String
  merek      String
  nama       String
  harga_beli Int
  harga_jual Int?
  stok_awal  Int
  stok       Int
  satuan     String    @unique
  logstok    Logstok[] @relation("inventori")
  status     Status    @default(INACTIVE)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime?
  isDeleted  Boolean?  @default(false)
  updatedBy  User?     @relation(fields: [updatedId], references: [id], name: "userInventoriCreate")
  createdBy  User?     @relation(fields: [createdId], references: [id], name: "userInventoriUpdate")
  updatedId  Int?
  createdId  Int?
}

model Logstok {
  id          Int        @id @default(autoincrement())
  stok        Decimal @default(22.99)
  inventori   Inventori? @relation("inventori", fields: [inventoriId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean?   @default(false)
  updatedBy   User?      @relation(fields: [updatedId], references: [id], name: "logstokupdatedBy")
  createdBy   User?      @relation(fields: [createdId], references: [id], name: "logstokcreatedBy")
  updatedId   Int?
  createdId   Int?
  inventoriId Int?
}

enum Status {
  MENUNGGU
  DITERIMA
  SELESAI
  ACTIVE
  INACTIVE
}
